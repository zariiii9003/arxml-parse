name: CI

on: [push, pull_request]

env:
  PY_COLORS: "1"

jobs:
  test:
    runs-on:  ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
        python-version: ["3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox
    - name: Test
      run: |
        tox -e test

  linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox
    - name: Run ruff linter
      run: |
        tox -e format,lint,type

  build:
    name: Build package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: python -m pip install build twine
    - name: Build wheel and sdist
      run: python -m build
    - name: Check artifacts
      run: twine check --strict dist/*
    - uses: actions/upload-artifact@v4
      with:
        name: dist-artifact
        path: dist/*

#  docs:
#    name: Build documentation
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#      with:
#        fetch-depth: 0
#    - name: Set up Python
#      uses: actions/setup-python@v5
#      with:
#        python-version: "3.11"
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        python -m pip install tox
#    - name: Build documentation
#      run: |
#        tox -e docs
#    - name: Upload documentation artifact
#      uses: actions/upload-artifact@v4
#      with:
#        name: doc-artifact
#        path: build/*

  upload_pypi:
    name: Publish
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/arxml-parse
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      contents: write  # for action-gh-release
      attestations: write  # for attest-build-provenance

    # create a new release for tagged commits
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: dist-artifact
        path: dist

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'dist/*'

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
